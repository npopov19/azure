{
	"name": "dataflow1",
	"properties": {
		"folder": {
			"name": "wip"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "containerpayhist",
						"type": "DatasetReference"
					},
					"name": "payhist"
				},
				{
					"dataset": {
						"referenceName": "containeremployees",
						"type": "DatasetReference"
					},
					"name": "Employees"
				},
				{
					"dataset": {
						"referenceName": "shifts",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureBlobStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "lookup1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          BusinessEntityID as short,",
				"          RateChangeDate as timestamp,",
				"          Rate as double,",
				"          PayFrequency as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> payhist",
				"source(output(",
				"          BusinessEntityID as short,",
				"          NationalIDNumber as integer,",
				"          LoginID as string,",
				"          OrganizationLevel as short,",
				"          JobTitle as string,",
				"          MaritalStatus as string,",
				"          Shift as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Employees",
				"source(output(",
				"          BusinessEntityID as string,",
				"          NationalIDNumber as string,",
				"          LoginID as string,",
				"          OrganizationLevel as string,",
				"          JobTitle as string,",
				"          MaritalStatus as string,",
				"          Shift as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"Employees, source1 lookup(Employees@Shift == source1@Shift,",
				"     multiple: false,",
				"     pickup: 'first',",
				"     asc(ShiftID, true),",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          BusinessEntityID = Employees@BusinessEntityID,",
				"          NationalIDNumber = Employees@NationalIDNumber,",
				"          {substr(LoginID,1,3)} = Employees@LoginID,",
				"          OrganizationLevel = Employees@OrganizationLevel,",
				"          JobTitle = Employees@JobTitle,",
				"          MaritalStatus = Employees@MaritalStatus,",
				"          Shift = Employees@Shift,",
				"          BusinessEntityID = source1@BusinessEntityID,",
				"          NationalIDNumber = source1@NationalIDNumber,",
				"          LoginID = source1@LoginID,",
				"          OrganizationLevel = source1@OrganizationLevel,",
				"          JobTitle = source1@JobTitle,",
				"          MaritalStatus = source1@MaritalStatus,",
				"          Shift = source1@Shift",
				"     )) ~> sink1"
			]
		}
	}
}